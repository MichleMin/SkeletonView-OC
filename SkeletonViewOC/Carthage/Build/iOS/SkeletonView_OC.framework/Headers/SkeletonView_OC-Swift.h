// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import QuartzCore;
@import UIKit;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SkeletonView_OC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(SkeletonView_OC))
@property (nonatomic, readonly, strong) CAAnimation * _Nonnull pulse;
@property (nonatomic, readonly, strong) CAAnimation * _Nonnull sliding;
- (void)playAnimation:(SWIFT_NOESCAPE CAAnimation * _Nonnull (^ _Nonnull)(CALayer * _Nonnull))anim key:(NSString * _Nonnull)key;
- (void)stopAnimationForKey:(NSString * _Nonnull)key;
@end

@class UICollectionView;

SWIFT_PROTOCOL_NAMED("SkeletonCollectionViewDataSource")
@protocol SkeletonCollectionViewDataSource <UICollectionViewDataSource>
- (NSInteger)numSectionsIn:(UICollectionView * _Nonnull)collectionSkeletonView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionSkeletonView:(UICollectionView * _Nonnull)skeletonView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)collectionSkeletonView:(UICollectionView * _Nonnull)skeletonView cellIdentifierForItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;

SWIFT_CLASS("_TtC15SkeletonView_OC16SkeletonGradient")
@interface SkeletonGradient : NSObject
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull colors;
- (nonnull instancetype)initWithBaseColor:(UIColor * _Nonnull)baseColor secondaryColor:(UIColor * _Nullable)secondaryColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UITableView;

SWIFT_PROTOCOL_NAMED("SkeletonTableViewDataSource")
@protocol SkeletonTableViewDataSource <UITableViewDataSource>
- (NSInteger)numSectionsIn:(UITableView * _Nonnull)collectionSkeletonView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionSkeletonView:(UITableView * _Nonnull)skeletonView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)collectionSkeletonView:(UITableView * _Nonnull)skeletonView cellIdenfierForRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end








@interface UIColor (SWIFT_EXTENSION(SkeletonView_OC))
@property (nonatomic, readonly, strong) UIColor * _Nonnull complementaryColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull lighter;
@property (nonatomic, readonly, strong) UIColor * _Nonnull darker;
@end


@interface UIColor (SWIFT_EXTENSION(SkeletonView_OC))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull greenSea;)
+ (UIColor * _Nonnull)greenSea SWIFT_WARN_UNUSED_RESULT;
+ (void)setGreenSea:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull turquoise;)
+ (UIColor * _Nonnull)turquoise SWIFT_WARN_UNUSED_RESULT;
+ (void)setTurquoise:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull emerald;)
+ (UIColor * _Nonnull)emerald SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmerald:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull peterRiver;)
+ (UIColor * _Nonnull)peterRiver SWIFT_WARN_UNUSED_RESULT;
+ (void)setPeterRiver:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull amethyst;)
+ (UIColor * _Nonnull)amethyst SWIFT_WARN_UNUSED_RESULT;
+ (void)setAmethyst:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull wetAsphalt;)
+ (UIColor * _Nonnull)wetAsphalt SWIFT_WARN_UNUSED_RESULT;
+ (void)setWetAsphalt:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull nephritis;)
+ (UIColor * _Nonnull)nephritis SWIFT_WARN_UNUSED_RESULT;
+ (void)setNephritis:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull belizeHole;)
+ (UIColor * _Nonnull)belizeHole SWIFT_WARN_UNUSED_RESULT;
+ (void)setBelizeHole:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull wisteria;)
+ (UIColor * _Nonnull)wisteria SWIFT_WARN_UNUSED_RESULT;
+ (void)setWisteria:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull midnightBlue;)
+ (UIColor * _Nonnull)midnightBlue SWIFT_WARN_UNUSED_RESULT;
+ (void)setMidnightBlue:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull sunFlower;)
+ (UIColor * _Nonnull)sunFlower SWIFT_WARN_UNUSED_RESULT;
+ (void)setSunFlower:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull carrot;)
+ (UIColor * _Nonnull)carrot SWIFT_WARN_UNUSED_RESULT;
+ (void)setCarrot:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull alizarin;)
+ (UIColor * _Nonnull)alizarin SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlizarin:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull clouds;)
+ (UIColor * _Nonnull)clouds SWIFT_WARN_UNUSED_RESULT;
+ (void)setClouds:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull concrete;)
+ (UIColor * _Nonnull)concrete SWIFT_WARN_UNUSED_RESULT;
+ (void)setConcrete:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull flatOrange;)
+ (UIColor * _Nonnull)flatOrange SWIFT_WARN_UNUSED_RESULT;
+ (void)setFlatOrange:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull pumpkin;)
+ (UIColor * _Nonnull)pumpkin SWIFT_WARN_UNUSED_RESULT;
+ (void)setPumpkin:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull pomegranate;)
+ (UIColor * _Nonnull)pomegranate SWIFT_WARN_UNUSED_RESULT;
+ (void)setPomegranate:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull silver;)
+ (UIColor * _Nonnull)silver SWIFT_WARN_UNUSED_RESULT;
+ (void)setSilver:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull asbestos;)
+ (UIColor * _Nonnull)asbestos SWIFT_WARN_UNUSED_RESULT;
+ (void)setAsbestos:(UIColor * _Nonnull)value;
@end






@interface UILabel (SWIFT_EXTENSION(SkeletonView_OC))
@property (nonatomic) NSInteger lastLineFillPercent;
@end














@interface UITextView (SWIFT_EXTENSION(SkeletonView_OC))
@property (nonatomic) NSInteger lastLineFillPercent;
@end














@interface UIView (SWIFT_EXTENSION(SkeletonView_OC))
- (void)showSkeletonUsingColor:(UIColor * _Nonnull)color;
- (void)showGradientSkeletonUsingGradient:(SkeletonGradient * _Nonnull)gradient;
- (void)showAnimatedSkeletonUsingColor:(UIColor * _Nonnull)color animation:(CAAnimation * _Nonnull (^ _Nullable)(CALayer * _Nonnull))animation;
- (void)showAnimatedGradientSkeletonUsingGradient:(SkeletonGradient * _Nonnull)gradient animation:(CAAnimation * _Nonnull (^ _Nullable)(CALayer * _Nonnull))animation;
- (void)hideSkeletonWithReloadDataAfter:(BOOL)reload;
- (void)startSkeletonAnimation:(CAAnimation * _Nonnull (^ _Nullable)(CALayer * _Nonnull))anim;
- (void)stopSkeletonAnimation;
@end




@interface UIView (SWIFT_EXTENSION(SkeletonView_OC))
@property (nonatomic) BOOL isSkeletonable;
@property (nonatomic, readonly) BOOL isSkeletonActive;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
